// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chirps.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addChirp = `-- name: AddChirp :one
INSERT INTO chirps (id, created_at, updated_at, body, user_id)
VALUES (
  gen_random_uuid(),
  NOW(),
  NOW(),
  $1,
  $2
)
RETURNING id, user_id, created_at, updated_at, body
`

type AddChirpParams struct {
	Body   string
	UserID uuid.UUID
}

func (q *Queries) AddChirp(ctx context.Context, arg AddChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, addChirp, arg.Body, arg.UserID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
	)
	return i, err
}

const deleteChirpByID = `-- name: DeleteChirpByID :exec
DELETE from chirps
WHERE id = $1 and user_id = $2
`

type DeleteChirpByIDParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteChirpByID(ctx context.Context, arg DeleteChirpByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteChirpByID, arg.ID, arg.UserID)
	return err
}

const getChirpByID = `-- name: GetChirpByID :one
SELECT id, user_id, created_at, updated_at, body FROM CHIRPS
WHERE ID = $1
`

func (q *Queries) GetChirpByID(ctx context.Context, id uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getChirpByID, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
	)
	return i, err
}

const getChirps = `-- name: GetChirps :many
SELECT id, user_id, created_at, updated_at, body FROM chirps
ORDER BY created_at
`

func (q *Queries) GetChirps(ctx context.Context) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getChirps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChirpsByID = `-- name: GetChirpsByID :many
SELECT id, user_id, created_at, updated_at, body FROM CHIRPS
WHERE user_id = $1
`

func (q *Queries) GetChirpsByID(ctx context.Context, userID uuid.UUID) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getChirpsByID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
